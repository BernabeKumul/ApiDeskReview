"""
Script para probar b√∫squedas h√≠bridas con datos reales.
"""
import asyncio
import logging
from app.services.vector_store import vector_store_service

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_hybrid_search():
    """Prueba b√∫squedas h√≠bridas con datos reales."""
    try:
        print("üîç Probando b√∫squedas h√≠bridas con datos reales...")
        
        # Conectar a Qdrant
        await vector_store_service.connect()
        
        # Obtener estad√≠sticas
        stats = await vector_store_service.get_collection_stats()
        print(f"üìä Colecci√≥n: {stats.get('name', 'N/A')}")
        print(f"   üìà Puntos totales: {stats.get('points_count', 0)}")
        
        # Prueba 1: B√∫squeda por similitud general
        print("\nüîç Prueba 1: B√∫squeda por similitud general")
        print("Query: 'Room 308'")
        
        results = await vector_store_service.search_similar(
            query_text="Room 308",
            limit=5
        )
        
        print(f"‚úÖ Resultados: {len(results)}")
        for i, result in enumerate(results[:3], 1):
            print(f"   {i}. Score: {result['score']:.3f}")
            print(f"      Doc: {result['metadata']['DocumentId']}")
            print(f"      Texto: {result['text'][:100]}...")
        
        # Prueba 2: B√∫squeda h√≠brida en documentos espec√≠ficos
        print("\nüîç Prueba 2: B√∫squeda h√≠brida")
        print("Documentos: [702903, 727656]")
        print("Query: 'Room 308'")
        
        hybrid_results = await vector_store_service.search_by_document_ids(
            document_ids=[702903, 727656],
            query_text="Room 308",
            limit=5
        )
        
        print(f"‚úÖ Resultados h√≠bridos: {len(hybrid_results)}")
        for i, result in enumerate(hybrid_results[:3], 1):
            print(f"   {i}. Score: {result['score']:.3f}")
            print(f"      Doc: {result['metadata']['DocumentId']}")
            print(f"      Texto: {result['text'][:100]}...")
        
        # Prueba 3: B√∫squeda por temperatura
        print("\nüîç Prueba 3: B√∫squeda por temperatura")
        print("Query: 'temperature 22'")
        
        temp_results = await vector_store_service.search_similar(
            query_text="temperature 22",
            limit=5
        )
        
        print(f"‚úÖ Resultados: {len(temp_results)}")
        for i, result in enumerate(temp_results[:3], 1):
            print(f"   {i}. Score: {result['score']:.3f}")
            print(f"      Doc: {result['metadata']['DocumentId']}")
            print(f"      Texto: {result['text'][:100]}...")
        
        # Prueba 4: B√∫squeda h√≠brida por crop
        print("\nüîç Prueba 4: B√∫squeda h√≠brida por crop")
        print("Documentos: [747575, 750980]")
        print("Query: 'crop 29'")
        
        crop_results = await vector_store_service.search_by_document_ids(
            document_ids=[747575, 750980],
            query_text="crop 29",
            limit=5
        )
        
        print(f"‚úÖ Resultados h√≠bridos: {len(crop_results)}")
        for i, result in enumerate(crop_results[:3], 1):
            print(f"   {i}. Score: {result['score']:.3f}")
            print(f"      Doc: {result['metadata']['DocumentId']}")
            print(f"      Texto: {result['text'][:100]}...")
        
        # Prueba 5: B√∫squeda por humedad
        print("\nüîç Prueba 5: B√∫squeda por humedad")
        print("Query: 'humidity 65'")
        
        humidity_results = await vector_store_service.search_similar(
            query_text="humidity 65",
            limit=5
        )
        
        print(f"‚úÖ Resultados: {len(humidity_results)}")
        for i, result in enumerate(humidity_results[:3], 1):
            print(f"   {i}. Score: {result['score']:.3f}")
            print(f"      Doc: {result['metadata']['DocumentId']}")
            print(f"      Texto: {result['text'][:100]}...")
        
    except Exception as e:
        print(f"‚ùå Error en pruebas: {e}")
    finally:
        await vector_store_service.disconnect()
        print("\n‚úÖ Pruebas de b√∫squeda completadas")

if __name__ == "__main__":
    asyncio.run(test_hybrid_search()) 